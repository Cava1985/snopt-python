!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! snopt7_python.pyf
! Signature file for SNOPT-python interface.
!
! To create sig file (*.pyf):
!     f2py snopt7_python.f90 -m snopt7_python -h snopt7_python.pyf
!
! 08 Feb 2015: Manually modified to make stuff work.
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    -*- f90 -*-

! Note: the context of this file is case sensitive.


python module test__user__routines
    interface test_user_interface
       subroutine funcon(modec,nncon,nnjac,negcon,x,fcon,gcon,statususer,cu,lencu,iu,leniu,ru,lenru)
         integer intent(in,out) :: modec
         integer intent(in) :: nncon
         integer intent(in) :: nnjac
         integer intent(in) :: negcon
         double precision dimension(nnjac),intent(in),depend(nnjac) :: x
         double precision dimension(nncon),intent(out),depend(nncon) :: fcon
         double precision dimension(negcon),intent(out),depend(negcon) :: gcon
         integer intent(in) :: statususer
         !character(len=8) dimension(lencu),intent(inplace) :: cu
         character*8 dimension(lencu),intent(inplace) :: cu
         integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
         integer dimension(leniu),intent(inplace) :: iu
         integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
         double precision dimension(lenru),intent(inplace) :: ru
         integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
       end subroutine funcon
       subroutine funobj(modef,nnobju,x,fobj,gobj,statususer,cu,lencu,iu,leniu,ru,lenru)
         integer intent(in,out) :: modef
         integer intent(in) :: nnobju
         double precision dimension(nnobju),intent(in),depend(nnobju) :: x
         double precision intent(out) :: fobj
         double precision dimension(nnobju),intent(out),depend(nnobju) :: gobj
         integer intent(in) :: statususer
         !character(len=8) dimension(lencu),intent(inplace) :: cu
         character*8 dimension(lencu),intent(inplace) :: cu
         integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
         integer dimension(leniu),intent(inplace) :: iu
         integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
         double precision dimension(lenru),intent(inplace) :: ru
         integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
       end subroutine funobj
       subroutine usrfun(status,n,xn,needf,nf,f,needg,leng,g,cu,lencu,iu,leniu,ru,lenru)
         integer intent(in,out) :: status
         integer, optional,intent(in),check(len(xn)>=n),depend(xn) :: n=len(xn)
         integer intent(in) :: needf
         integer, optional,intent(in),check(len(f)>=nf),depend(f) :: nf=len(f)
         integer intent(in) :: needg
         integer, optional,intent(in),check(len(g)>=leng),depend(g) :: leng=len(g)
         double precision dimension(n),intent(in),depend(n) :: xn
         double precision dimension(nf),intent(out),depend(nf) :: f
         double precision dimension(leng),intent(out),depend(leng) :: g
         !character(len=8) dimension(lencu),intent(inplace) :: cu
         character*8 dimension(lencu),intent(inplace) :: cu
         integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
         integer dimension(leniu),intent(inplace) :: iu
         integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
         double precision dimension(lenru),intent(inplace) :: ru
         integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
       end subroutine usrfun
    end interface test_user_interface
end python module test__user__routines

python module snopt7_python ! in
    interface  ! in :snopt7_python
        subroutine sntitle_wrap(iw,leniw) ! in :snopt7_python:snopt7_python.f90
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
        end subroutine sntitle_wrap
        subroutine snopen_wrap(iprint,prtfile,isumm,sumfile) ! in :snopt7_python:snopt7_python.f90
            integer intent(in) :: iprint
            character*(*) intent(in) :: prtfile
            integer intent(in) :: isumm
            character*(*) intent(in) :: sumfile
        end subroutine snopen_wrap
        subroutine sninit_wrap(cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine sninit_wrap
        subroutine snspec_wrap(info,ispecs,spcfile,cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            integer intent(out) :: info
            integer intent(in) :: ispecs
            character*(*) intent(in) :: spcfile
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snspec_wrap
        subroutine snmema_wrap(info,nf,n,nxname,nfname,nea,neg,mincw,miniw,minrw,cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            integer intent(out) :: info
            integer intent(in) :: nf
            integer intent(in) :: n
            integer intent(in) :: nxname
            integer intent(in) :: nfname
            integer intent(in) :: nea
            integer intent(in) :: neg
            integer intent(out) :: mincw
            integer intent(out) :: miniw
            integer intent(out) :: minrw
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snmema_wrap
        subroutine snmemb_wrap(info,m,n,ne,neg,nncon,nnjac,nnobj,mincw,miniw,minrw,cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            integer intent(out) :: info
            integer intent(in) :: m
            integer intent(in) :: n
            integer intent(in) :: ne
            integer intent(in) :: neg
            integer intent(in) :: nncon
            integer intent(in) :: nnjac
            integer intent(in) :: nnobj
            integer intent(out) :: mincw
            integer intent(out) :: miniw
            integer intent(out) :: minrw
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snmemb_wrap
        subroutine snjac_wrap(info,nf,n,usrfun,iafun,javar,lena,nea,a,igfun,jgvar,leng,neg,x,xlow,xupp,mincw,miniw,minrw,cu,lencu,iu,leniu,ru,lenru,cw,lencw,iw,leniw,rw,lenrw)
            use snopt_python_interfaces
            use test__user__routines
            external usrfun
            integer intent(out) :: info
            integer intent(in) :: nf
            integer, optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
            integer dimension(lena),intent(out),depend(lena) :: iafun
            integer dimension(lena),intent(out),depend(lena) :: javar
            integer intent(in) :: lena
            integer intent(out) :: nea
            double precision dimension(lena),intent(out),depend(lena) :: a
            integer dimension(leng),intent(out),depend(leng) :: igfun
            integer dimension(leng),intent(out),depend(leng) :: jgvar
            integer intent(in) :: leng
            integer intent(out) :: neg
            double precision dimension(n),intent(in,out),intent(copy) :: x
            double precision dimension(n),intent(in),depend(n) :: xlow
            double precision dimension(n),intent(in),depend(n) :: xupp
            integer intent(out) :: mincw
            integer intent(out) :: miniw
            integer intent(out) :: minrw
            !character(len=8) dimension(lencu),intent(inplace) :: cu
            character*8 dimension(lencu),intent(inplace) :: cu
            integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
            integer dimension(leniu),intent(inplace) :: iu
            integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
            double precision dimension(lenru),intent(inplace) :: ru
            integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snjac_wrap
        subroutine snopta_wrap(start,nf,n,nxname,nfname,objuadd,objrow,prob,usrfun,iafun,javar,lena,nea,a,igfun,jgvar,leng,neg,xlow,xupp,xnames,flow,fupp,fnames,x,xstate,xmul,f,fstate,fmul,info,itn,mjritn,mincw,miniw,minrw,ns,ninf,sinf,obj,cu,lencu,iu,leniu,ru,lenru,cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            use snopt_python_interfaces
            use test__user__routines
            external usrfun
            integer intent(in) :: start
            integer, optional,intent(in),check(len(flow)>=nf),depend(flow) :: nf=len(flow)
            integer, optional,intent(in),check(len(xlow)>=n),depend(xlow) :: n=len(xlow)
            integer, optional,intent(in),check(len(xnames)>=nxname),depend(xnames) :: nxname=len(xnames)
            integer, optional,intent(in),check(len(fnames)>=nfname),depend(fnames) :: nfname=len(fnames)
            double precision intent(in) :: objuadd
            integer intent(in) :: objrow
            character(len=8) intent(in) :: prob
            integer dimension(lena),intent(in) :: iafun
            integer dimension(lena),intent(in),depend(lena) :: javar
            integer, optional,intent(in),check(len(iafun)>=lena),depend(iafun) :: lena=len(iafun)
            integer intent(in) :: nea
            double precision dimension(lena),intent(in),depend(lena) :: a
            integer dimension(leng),intent(in) :: igfun
            integer dimension(leng),intent(in),depend(leng) :: jgvar
            integer, optional,intent(in),check(len(igfun)>=leng),depend(igfun) :: leng=len(igfun)
            integer intent(in) :: neg
            double precision dimension(n),intent(in) :: xlow
            double precision dimension(n),intent(in),depend(n) :: xupp
            !character(len=8) dimension(nxname),intent(in) :: xnames
            character*8 dimension(nxname),intent(in) :: xnames
            double precision dimension(nf),intent(in) :: flow
            double precision dimension(nf),intent(in),depend(nf) :: fupp
            !character(len=8) dimension(nfname),intent(in) :: fnames
            character*8 dimension(nfname),intent(in) :: fnames
            double precision dimension(n),intent(in,out),intent(copy),depend(n) :: x
            integer dimension(n),intent(in,out),intent(copy),depend(n) :: xstate
            double precision dimension(n),intent(in,out),intent(copy),depend(n) :: xmul
            double precision dimension(nf),intent(in,out),intent(copy),depend(nf) :: f
            integer dimension(nf),intent(in,out),intent(copy),depend(nf) :: fstate
            double precision dimension(nf),intent(in,out),intent(copy),depend(nf) :: fmul
            integer intent(out) :: info
            integer intent(out) :: itn
            integer intent(out) :: mjritn
            integer intent(out) :: mincw
            integer intent(out) :: miniw
            integer intent(out) :: minrw
            integer intent(out) :: ns
            integer intent(out) :: ninf
            double precision intent(out) :: sinf
            double precision intent(out) :: obj
            !character(len=8) dimension(lencu),intent(inplace) :: cu
            character*8 dimension(lencu),intent(inplace) :: cu
            integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
            integer dimension(leniu),intent(inplace) :: iu
            integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
            double precision dimension(lenru),intent(inplace) :: ru
            integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snopta_wrap
        subroutine snoptb_wrap(start,m,n,nej,nnames,nncon,nnobju,nnjac,iobju,objuadd,prob,funcon,funobj,valj,indj,locj,bl,bu,names,hs,x,pi,rc,info,itn,mjritn,mincw,miniw,minrw,ns,ninf,sinf,obj,cu,lencu,iu,leniu,ru,lenru,cw,lencw,iw,leniw,rw,lenrw) ! in :snopt7_python:snopt7_python.f90
            use snopt_python_interfaces
            use test__user__routines
            external funcon, funobj
            character*(*) intent(in) :: start
            integer, optional,intent(in),check(len(pi)>=m),depend(pi) :: m=len(pi)
            integer, optional,intent(in),check((len(locj)-1)>=n),depend(locj) :: n=(len(locj)-1)
            integer, optional,intent(in),check(len(valj)>=nej),depend(valj) :: nej=len(valj)
            integer, optional,intent(in),check(len(names)>=nnames),depend(names) :: nnames=len(names)
            integer intent(in) :: nncon
            integer intent(in) :: nnobju
            integer intent(in) :: nnjac
            integer intent(in) :: iobju
            double precision intent(in) :: objuadd
            character(len=8) intent(in) :: prob
            double precision dimension(nej),intent(in) :: valj
            integer dimension(nej),intent(in),depend(nej) :: indj
            integer dimension(n + 1),intent(in) :: locj
            double precision dimension(n+m),intent(in),depend(m,n) :: bl
            double precision dimension(n+m),intent(in),depend(m,n) :: bu
            !character(len=8) dimension(nnames),intent(in) :: names
            character*8 dimension(nnames),intent(in) :: names
            integer intent(out) :: info
            integer intent(out) :: itn
            integer intent(out) :: mjritn
            integer intent(out) :: mincw
            integer intent(out) :: miniw
            integer intent(out) :: minrw
            integer intent(out) :: ns
            integer intent(out) :: ninf
            double precision intent(out) :: sinf
            double precision intent(out) :: obj
            integer dimension(n+m),intent(in,out),intent(copy),depend(m,n) :: hs
            double precision dimension(n+m),intent(in,out),intent(copy),depend(m,n) :: x
            double precision dimension(m),intent(in,out),intent(copy) :: pi
            double precision dimension(n+m),intent(in,out),intent(copy),depend(m,n) :: rc
            !character(len=8) dimension(lencu),intent(inplace) :: cu
            character*8 dimension(lencu),intent(inplace) :: cu
            integer, optional,intent(in),check(len(cu)>=lencu),depend(cu) :: lencu=len(cu)
            integer dimension(leniu),intent(inplace) :: iu
            integer, optional,intent(in),check(len(iu)>=leniu),depend(iu) :: leniu=len(iu)
            double precision dimension(lenru),intent(inplace) :: ru
            integer, optional,intent(in),check(len(ru)>=lenru),depend(ru) :: lenru=len(ru)
            !character(len=8) dimension(lencw),intent(inplace) :: cw
            character*8 dimension(lencw),intent(inplace) :: cw
            integer, optional,intent(in),check(len(cw)>=lencw),depend(cw) :: lencw=len(cw)
            integer dimension(leniw),intent(inplace) :: iw
            integer, optional,intent(in),check(len(iw)>=leniw),depend(iw) :: leniw=len(iw)
            double precision dimension(lenrw),intent(inplace) :: rw
            integer, optional,intent(in),check(len(rw)>=lenrw),depend(rw) :: lenrw=len(rw)
        end subroutine snoptb_wrap
        subroutine close_wrap(iprint,isumm) ! in :snopt7_python:snopt7_python.f90
            integer intent(in) :: iprint
            integer intent(in) :: isumm
        end subroutine close_wrap
    end interface
end python module snopt7_python

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
